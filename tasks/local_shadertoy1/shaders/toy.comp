#version 430

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba8) uniform image2D resultImage;

const vec2 iResolution = vec2(1280, 720);

const int MAX_MARCHING_STEPS = 255;
const float MIN_DIST = 0.0;
const float MAX_DIST = 8.0;
const float PRECISION = 1e-3;
const float LH = -2.0 - PRECISION;
const float RH = 2.0 + PRECISION;
const float LD = -2.0 - PRECISION;
const float RD = 6.0 + PRECISION;
const float LV = -1.0 - PRECISION;
const float RV = 3.0 + PRECISION;
const float RAD = 1.0;
const vec3 SPHERE_CENTER = vec3(0.0, 1.0, -1.0);


float shadowAmount(vec3 lightPos, vec3 surfPos) {
    vec3 lightDir = surfPos - lightPos;
    vec3 radDir = SPHERE_CENTER - lightPos;
    float angleCos = dot(normalize(lightDir), normalize(radDir));
    float doubleAngleCos = 2.0 * pow(angleCos, 2.0) - 1.0;
    float len = sqrt(pow((SPHERE_CENTER.x - lightPos.x), 2.0) + pow((SPHERE_CENTER.y - lightPos.y), 2.0) + pow((SPHERE_CENTER.z - lightPos.z), 2.0));
    float difference = (2.0 * pow(len, 2.0) - 2.0 * pow(len, 2.0) * doubleAngleCos) / 2.0;
    if (difference < RAD) {
        if (angleCos < 0.0) {
            return 1.5;
        }
        return 0.3;
    }
    return 1.0;
}

bool isInRoom(vec3 pos) {
    return pos.x > LH && pos.x < RH && pos.z > LD && pos.z < RD && pos.y > LV && pos.y < RV;
}

vec4 rayPlaneIntersection(float plane, vec3 ro, vec3 rd, vec3 lightPos, vec3 N, vec3 col) {
    if (plane > 0.0) {
        vec3 pos = ro + rd * plane;
        if (isInRoom(pos)) {
            float shadow = shadowAmount(lightPos, pos);
            vec3 L = normalize(lightPos - pos);
            float diffuse = max(0.0, dot(N, L));
            return vec4(col * diffuse * shadow, 1.0);
        }
    }
    return vec4(0.0, 0.0, 0.0, 0.0);
}

float sdSphere(vec3 p) {
  return length(p - SPHERE_CENTER) - RAD;
}

float rayMarch(vec3 ro, vec3 rd, float start, float end) {
  float depth = start;

  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {
    vec3 p = ro + depth * rd;
    float d = sdSphere(p);
    depth += d;
    if (d < PRECISION || depth > end) break;
  }

  return depth;
}

vec3 calcNormal(vec3 p) {
    vec2 e = vec2(1.0, -1.0) * PRECISION;
    float r = 1.;
    return normalize(
      e.xyy * sdSphere(p + e.xyy) +
      e.yyx * sdSphere(p + e.yyx) +
      e.yxy * sdSphere(p + e.yxy) +
      e.xxx * sdSphere(p + e.xxx));
}

void main() {
    ivec2 iuv = ivec2(gl_GlobalInvocationID.xy) ;
    vec2 uv = (iuv / iResolution * 2.0 - 1.0) * 1280.0 / 720.0;
    vec2 mouse = vec2(0.3, 0.5);
    float yaw = (mouse.x * 2.0 - 1.0) * 3.14159;
    float pitch = (mouse.y - 0.5) * 3.14159;

    // Camera rotation
    vec3 forward = vec3(cos(yaw) * cos(pitch), sin(pitch), sin(yaw) * cos(pitch));
    vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));
    vec3 up = normalize(cross(forward, right));

    // Ray origin
    vec3 ro = vec3(0.0, 1.5, 3.0);

    // Ray direction
    vec3 rd = normalize(forward + (uv.x - 0.5) * right * (iResolution.x/iResolution.y) + (uv.y - 0.5) * up);

    // Light position
    vec3 lightPos = vec3(1.5, 1.8, 0.8);
    
    // Distance to sphere
    float d = rayMarch(ro, rd, MIN_DIST, MAX_DIST);
    
    vec3 col = vec3(0);
    if (d > MAX_DIST) {
        col = vec3(0.0, 0.0, 0.0);
    } else {
        vec3 p = ro + rd * d;
        vec3 normal = calcNormal(p);
        vec3 lightDirection = normalize(lightPos - p);
        float dif = clamp(dot(normal, lightDirection), 0.3, 1.);
        col = dif * vec3(0.7, 0.4, 0.4);
    }

    if (col != vec3(0.0, 0.0, 0.0)) {
        imageStore(resultImage, iuv, vec4(col, 1));
        return;
    }
    

    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
    // Floor
    color = rayPlaneIntersection(-ro.y / rd.y, ro, rd, lightPos, vec3(0.0, 1.0, 0.0), vec3(0.5, 0.3, 0.1));
    if (color.a > 0.0) {
      imageStore(resultImage, iuv, color);
      return;
    }
    // Ceiling
    color = rayPlaneIntersection((3.0 - ro.y) / rd.y, ro, rd, lightPos, vec3(0.0, -1.0, 0.0), vec3(0.8, 0.8, 0.8));
    if (color.a > 0.0) {
      imageStore(resultImage, iuv, color);
      return;
    }

    // Wall 1 (Green)
    color = rayPlaneIntersection((-2.0 - ro.x) / rd.x, ro, rd, lightPos, vec3(1.0, 0.0, 0.0), vec3(0.2, 0.5, 0.2));
    if (color.a > 0.0) {
      imageStore(resultImage, iuv, color);
      return;
    }
    
    // Wall 2 (Blue)
    color = rayPlaneIntersection((2.0 - ro.x) / rd.x, ro, rd, lightPos, vec3(-1.0, 0.0, 0.0), vec3(0.2, 0.2, 0.5));
    if (color.a > 0.0) {
      imageStore(resultImage, iuv, color);
      return;
    }

    // Wall 3 (Red)
    color = rayPlaneIntersection((-2.0 - ro.z) / rd.z, ro, rd, lightPos, vec3(0.0, 0.0, 1.0), vec3(0.5, 0.2, 0.2));
    if (color.a > 0.0) {
      imageStore(resultImage, iuv, color);
      return;
    }
    
    // Wall 3 (Yellow)
    color = rayPlaneIntersection((6.0 - ro.z) / rd.z, ro, rd, lightPos, vec3(0.0, 0.0, -1.0), vec3(0.5, 0.5, 0.2));
    if (color.a > 0.0) {
      imageStore(resultImage, iuv, color);
      return;
    }
    imageStore(resultImage, iuv, color);
}